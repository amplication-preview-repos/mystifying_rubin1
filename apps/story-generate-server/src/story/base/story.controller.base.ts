/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StoryService } from "../story.service";
import { StoryCreateInput } from "./StoryCreateInput";
import { Story } from "./Story";
import { StoryFindManyArgs } from "./StoryFindManyArgs";
import { StoryWhereUniqueInput } from "./StoryWhereUniqueInput";
import { StoryUpdateInput } from "./StoryUpdateInput";

export class StoryControllerBase {
  constructor(protected readonly service: StoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Story })
  async createStory(@common.Body() data: StoryCreateInput): Promise<Story> {
    return await this.service.createStory({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,

        ageGroup: data.ageGroup
          ? {
              connect: data.ageGroup,
            }
          : undefined,

        genre: data.genre
          ? {
              connect: data.genre,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        image: true,

        category: {
          select: {
            id: true,
          },
        },

        ageGroup: {
          select: {
            id: true,
          },
        },

        genre: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Story] })
  @ApiNestedQuery(StoryFindManyArgs)
  async stories(@common.Req() request: Request): Promise<Story[]> {
    const args = plainToClass(StoryFindManyArgs, request.query);
    return this.service.stories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        image: true,

        category: {
          select: {
            id: true,
          },
        },

        ageGroup: {
          select: {
            id: true,
          },
        },

        genre: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Story })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async story(
    @common.Param() params: StoryWhereUniqueInput
  ): Promise<Story | null> {
    const result = await this.service.story({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        image: true,

        category: {
          select: {
            id: true,
          },
        },

        ageGroup: {
          select: {
            id: true,
          },
        },

        genre: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Story })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStory(
    @common.Param() params: StoryWhereUniqueInput,
    @common.Body() data: StoryUpdateInput
  ): Promise<Story | null> {
    try {
      return await this.service.updateStory({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,

          ageGroup: data.ageGroup
            ? {
                connect: data.ageGroup,
              }
            : undefined,

          genre: data.genre
            ? {
                connect: data.genre,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          image: true,

          category: {
            select: {
              id: true,
            },
          },

          ageGroup: {
            select: {
              id: true,
            },
          },

          genre: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Story })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStory(
    @common.Param() params: StoryWhereUniqueInput
  ): Promise<Story | null> {
    try {
      return await this.service.deleteStory({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          image: true,

          category: {
            select: {
              id: true,
            },
          },

          ageGroup: {
            select: {
              id: true,
            },
          },

          genre: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/generateStory")
  @swagger.ApiOkResponse({
    type: Story,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateStory(
    @common.Body()
    body: StoryCreateInput
  ): Promise<Story> {
    return this.service.GenerateStory(body);
  }
}
