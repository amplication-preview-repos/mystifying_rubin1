/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AgeGroup } from "./AgeGroup";
import { AgeGroupCountArgs } from "./AgeGroupCountArgs";
import { AgeGroupFindManyArgs } from "./AgeGroupFindManyArgs";
import { AgeGroupFindUniqueArgs } from "./AgeGroupFindUniqueArgs";
import { CreateAgeGroupArgs } from "./CreateAgeGroupArgs";
import { UpdateAgeGroupArgs } from "./UpdateAgeGroupArgs";
import { DeleteAgeGroupArgs } from "./DeleteAgeGroupArgs";
import { StoryFindManyArgs } from "../../story/base/StoryFindManyArgs";
import { Story } from "../../story/base/Story";
import { AgeGroupService } from "../ageGroup.service";
@graphql.Resolver(() => AgeGroup)
export class AgeGroupResolverBase {
  constructor(protected readonly service: AgeGroupService) {}

  async _ageGroupsMeta(
    @graphql.Args() args: AgeGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AgeGroup])
  async ageGroups(
    @graphql.Args() args: AgeGroupFindManyArgs
  ): Promise<AgeGroup[]> {
    return this.service.ageGroups(args);
  }

  @graphql.Query(() => AgeGroup, { nullable: true })
  async ageGroup(
    @graphql.Args() args: AgeGroupFindUniqueArgs
  ): Promise<AgeGroup | null> {
    const result = await this.service.ageGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AgeGroup)
  async createAgeGroup(
    @graphql.Args() args: CreateAgeGroupArgs
  ): Promise<AgeGroup> {
    return await this.service.createAgeGroup({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AgeGroup)
  async updateAgeGroup(
    @graphql.Args() args: UpdateAgeGroupArgs
  ): Promise<AgeGroup | null> {
    try {
      return await this.service.updateAgeGroup({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AgeGroup)
  async deleteAgeGroup(
    @graphql.Args() args: DeleteAgeGroupArgs
  ): Promise<AgeGroup | null> {
    try {
      return await this.service.deleteAgeGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Story], { name: "stories" })
  async findStories(
    @graphql.Parent() parent: AgeGroup,
    @graphql.Args() args: StoryFindManyArgs
  ): Promise<Story[]> {
    const results = await this.service.findStories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
