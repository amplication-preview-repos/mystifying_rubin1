/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AgeGroup as PrismaAgeGroup,
  Story as PrismaStory,
} from "@prisma/client";

export class AgeGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AgeGroupCountArgs, "select">): Promise<number> {
    return this.prisma.ageGroup.count(args);
  }

  async ageGroups(
    args: Prisma.AgeGroupFindManyArgs
  ): Promise<PrismaAgeGroup[]> {
    return this.prisma.ageGroup.findMany(args);
  }
  async ageGroup(
    args: Prisma.AgeGroupFindUniqueArgs
  ): Promise<PrismaAgeGroup | null> {
    return this.prisma.ageGroup.findUnique(args);
  }
  async createAgeGroup(
    args: Prisma.AgeGroupCreateArgs
  ): Promise<PrismaAgeGroup> {
    return this.prisma.ageGroup.create(args);
  }
  async updateAgeGroup(
    args: Prisma.AgeGroupUpdateArgs
  ): Promise<PrismaAgeGroup> {
    return this.prisma.ageGroup.update(args);
  }
  async deleteAgeGroup(
    args: Prisma.AgeGroupDeleteArgs
  ): Promise<PrismaAgeGroup> {
    return this.prisma.ageGroup.delete(args);
  }

  async findStories(
    parentId: string,
    args: Prisma.StoryFindManyArgs
  ): Promise<PrismaStory[]> {
    return this.prisma.ageGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stories(args);
  }
}
